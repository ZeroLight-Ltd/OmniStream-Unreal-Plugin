// Copyright ZeroLight ltd. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Engine/DeveloperSettings.h"

#if WITH_EDITOR
#include "IDetailCustomization.h"
#include "DetailLayoutBuilder.h"
#include "DetailCategoryBuilder.h"
#include "IPropertyTypeCustomization.h"
#include "Widgets/Images/SImage.h"
#include "DetailWidgetRow.h"
#include "Editor/UnrealEd/Public/EditorDirectories.h"
#include "HAL/FileManager.h"
#include "Slate/SlateBrushAsset.h"
#include "Misc/FileHelper.h"
#include "Engine/Texture2D.h"
#include "ImageUtils.h"
#include "Slate/SlateTextureAtlasInterface.h"
#include "Widgets/Text/STextBlock.h"
#include "Widgets/Layout/SBox.h"
#endif

#include "EditorZLCloudPluginSettings.generated.h"

// Config loaded/saved to an .ini file.
// It is also exposed through the plugin settings page in editor.
UCLASS(config = ZLCloudPluginSettings, meta = (DisplayName = "Settings"))
class ZLCLOUDPLUGIN_API UZLCloudPluginSettings : public UDeveloperSettings
{
	GENERATED_UCLASS_BODY()

public:

	/**
	 * Defines the startup GameMode asset where ZLCloudPlugin blueprint nodes are used.
	 * This searches the blueprint in the editor and appends metadata used for determining app capabilities/startup behaviours
	 */
	//UPROPERTY(EditAnywhere, config, Category = "")
	//TSoftObjectPtr<UBlueprint> StartupGameModeAsset;

	/**
	 * ZLCloudStream may be running on a machine which has no physical mouse attached, and yet the browser is sending mouse positions. 
	 * As such, we fake the presence of a mouse.
	 */
	UPROPERTY(config, EditAnywhere, Category = Input)
	bool bMouseAlwaysAttached = true;

	/**
	* Keys you want to allow the browser to pass to your application (seperated by a comma)
	* Use https://keycode.info/ to get your key codes
	*/
	UPROPERTY(config, EditAnywhere, Category = Input)
	FString filteredKeyList = TEXT("81,87,69,65,83,68,38,37,40,39,32");

	TSet<FKey> FilteredKeys;
	void UpdateFilteredKeys();


	UPROPERTY(config, EditAnywhere, Category = Performance)
	int FramesPerSecond = 30;

	/**
	 * Delay app allowing stream adoption until after the 'Set App Ready to Stream' node is triggered in Game Mode blueprint. 
	 * 
	 * IMPORTANT: If enabled, this node MUST be called to allow cloud streaming to begin.
	 */
	UPROPERTY(config, EditAnywhere, Category = Cloud)
	bool DelayAppReadyToStream = false;

	/**
	 * Restart the app on user disconnect, used to reset state (better to reset state on disconnect event)
	 */
	UPROPERTY(config, EditAnywhere, Category = Cloud)
	bool bRebootAppOnDisconnect = false;

	/**
	 * Disable texture streaming in the app launch run arguments (to prevent texture's visibly loading in stream)
	 */
	UPROPERTY(config, EditAnywhere, Category = Cloud)
	bool bDisableTextureStreamingOnLaunch = false;

	/**
	 * When a state request is processing for more than the specified value (in seconds) a warning with processing info is logged
	 */
	UPROPERTY(config, EditAnywhere, Category = Cloud)
	float stateRequestWarningTime = 10.0;

	/**
	 * When a state request is processing for more than the specified value (in seconds) the request times out and reports a timeout to the web
	 */
	UPROPERTY(config, EditAnywhere, Category = Cloud)
	float stateRequestTimeout = 30.0;

	/**
	 * Project override for the number of frames waited before capturing content generation screenshot jobs after state is matched. If set to 0, plugin defaults are used (8 frames by default, 32 frames by default for projects with r.RayTracing enabled.)
	 */
	UPROPERTY(config, EditAnywhere, Category = Cloud)
	int screenshotFrameWaitCountOverride = 0;

	/**
	 * Allows support for running the app in CloudXR mode. Requires OpenXR plugin to be enabled.
	 */
	UPROPERTY(config, EditAnywhere, Category = Engine)
	bool supportsVR = false;

	/**
	 * The app type for portal deployment.
	 */
	UPROPERTY(config, VisibleDefaultsOnly, Category = BuildAndDeploy)
	FString deployName;

	/**
	* The display name associated with the asset-line ID for deployment.
	*/
	UPROPERTY(config, VisibleDefaultsOnly, Category = BuildAndDeploy)
	FString displayName;

	/**
	* User assigned build ID for deployment structures
	*/
	UPROPERTY(config, VisibleDefaultsOnly, Category = BuildAndDeploy)
	FString buildId = "0000";


	/**
	* The directory this project has been built to
	*/
	UPROPERTY(config, EditAnywhere, Category = BuildAndDeploy)
	FString buildFolder;

	/**
	* Autogenerated Portal asset line ID this project will upload to
	*/
	UPROPERTY(config, VisibleDefaultsOnly, Category = BuildAndDeploy)
	FString portalAssetLineId = "";

	/**
	* Server url for portal uploads. Readonly in editor, can be overriden in ini file
	*/
	UPROPERTY(config, VisibleDefaultsOnly, Category = BuildAndDeploy)
	FString portalServerUrl = "https://portal.zerolight.com";

	/**
	* Sets a manual override for specifying the http proxy used. Portal attempts auto detection, if set then this field will override automatic detection.
	*/
	UPROPERTY(config, EditAnywhere, Category = BuildAndDeploy)
	FString httpProxyOverride = "";

	/**
	* Specifies a filepath on-disk to a jpeg/png image that will be used as the thumbnail for the project in Portal
	*/
	UPROPERTY(config, EditAnywhere, Category = "Thumbnail", meta = (FilePathFilter = "Image Files (*.jpg, *.png, *.jpeg)|*.jpg;*.png;*.jpeg"))
	FFilePath thumbnailImagePath;

	FString GetDeployName()
	{
		return deployName;
	};

	FString GetBuildID()
	{
		return buildId;
	};

	FString GetHttpProxyOverride()
	{
		return httpProxyOverride;
	};

	FString GetThumbnailFilePath()
	{
		return thumbnailImagePath.FilePath;
	}

	// Begin UDeveloperSettings Interface
	virtual FName GetCategoryName() const override;
#if WITH_EDITOR
	virtual FText GetSectionText() const override;
#endif
	// END UDeveloperSettings Interface

#if WITH_EDITOR
	virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;
#endif
};

#if WITH_EDITOR
class FZLCloudPluginSettingsCustomization : public IDetailCustomization
{
private:
	FString lastLoadedThumbnailPath;
	FSlateBrush ThumbnailImageBrush;
	TSharedPtr<SImage> ThumbnailImageWidget;
	TSharedPtr<IPropertyHandle> ThumbnailPathProperty;

public:
	inline static TSharedRef<IDetailCustomization> MakeInstance()
	{
		return MakeShareable(new FZLCloudPluginSettingsCustomization);
	}

	inline void CustomizeDetails(IDetailLayoutBuilder& DetailBuilder) override
	{
		IDetailCategoryBuilder& ThumbnailCategory = DetailBuilder.EditCategory("Thumbnail");

		ThumbnailPathProperty = DetailBuilder.GetProperty(GET_MEMBER_NAME_CHECKED(UZLCloudPluginSettings, thumbnailImagePath));

		ThumbnailCategory.AddCustomRow(FText::FromString("Thumbnail"))
			.NameContent()
			[
				SNew(STextBlock).Text(FText::FromString("Thumbnail Image"))
			]
			.ValueContent()
			.MinDesiredWidth(64.0f)
			.MaxDesiredWidth(512.0f)
			[
				SNew(SBox)
				.MinDesiredHeight(64.0f)
				.MinDesiredWidth(64.0f)
				.MaxDesiredHeight(512.0f)
				.MaxDesiredWidth(512.0f)
				[
					SAssignNew(ThumbnailImageWidget, SImage)
					.Image(this, &FZLCloudPluginSettingsCustomization::GetThumbnailBrush)
				]
			];

	}

	inline const FSlateBrush* GetThumbnailBrush() const
	{
		FSlateBrush* tempBrushPtr = const_cast<FZLCloudPluginSettingsCustomization*>(this)->UpdateThumbnailBrush(); // Cast away constness 
		return (tempBrushPtr == nullptr) ? nullptr : &ThumbnailImageBrush;
	}

	inline FSlateBrush* UpdateThumbnailBrush()
	{
		if (ThumbnailPathProperty.IsValid())
		{
			TArray<void*> RawDataPtrs;
			ThumbnailPathProperty->AccessRawData(RawDataPtrs);

			if (RawDataPtrs.IsValidIndex(0))
			{
				FFilePath* imageFilePath = static_cast<FFilePath*>(RawDataPtrs[0]);

				FString thumbnailImagePath = imageFilePath->FilePath;

				if (thumbnailImagePath == lastLoadedThumbnailPath)
				{
					return (lastLoadedThumbnailPath.IsEmpty() || !FPaths::FileExists(lastLoadedThumbnailPath)) ? nullptr : &ThumbnailImageBrush;
				}

				lastLoadedThumbnailPath = imageFilePath->FilePath;

				if (thumbnailImagePath.IsEmpty() || !FPaths::FileExists(thumbnailImagePath))
				{
					return nullptr;
				}

				UTexture2D* LoadedTexture = FImageUtils::ImportFileAsTexture2D(thumbnailImagePath);
				if (LoadedTexture)
				{
					FSlateBrush* newThumbnailBrush = new FSlateBrush();

					newThumbnailBrush->SetResourceObject(LoadedTexture);

					if (ThumbnailImageWidget.IsValid())
					{
						int desiredWidth = LoadedTexture->GetSizeX(), desiredHeight = LoadedTexture->GetSizeY();
						int maxDim = 512;

						while (desiredWidth > maxDim || desiredHeight > maxDim)
						{
							desiredWidth /= 2;
							desiredHeight /= 2;
						}
						
						ThumbnailImageWidget->SetDesiredSizeOverride(FVector2D(desiredWidth, desiredHeight));
					}

					ThumbnailImageBrush = *newThumbnailBrush;
					return newThumbnailBrush;
				}
			}
		}

		return nullptr;
	}
};
#endif